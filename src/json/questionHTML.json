[
  {
    "question": " Що таке DOCTYPE і для чого він потрібен? Що буде, якщо його не вказати?",
    "answer": "DOCTYPE вказує тип поточного документа. Це необхідно, щоб браузер розумів, як слід інтерпретувати поточну веб-сторінку, оскільки HTML існує у кількох версіях. Якщо не вказати- Браузер спробує відобразити сторінку в режимі сумісності (quirks mode). Це може призвести до того, що в різних браузерах сторінка відображатиметься по-різному."
  },
  {
    "question": "Для чого потрібні мета-теги? ",
    "answer": "Мета-теги - це теги, які надають пошуковим системам додаткову інформацію про сторінку сайту. Наприклад, механізми пошукових систем звертаються до мета-тегів для отримання опису сайту, ключових слів та інших даних. Мета-теги для сайту розміщуються всередині <head>."
  },
  {
    "question": "Чим відрізняється блочний елемент від строчного?",
    "answer": "Блокові елементи є основою, яка використовується для верстки сторінок. Такий елемент є прямокутником, який за замовчуванням займає всю доступну ширину сторінки, а висота елемента залежить від його вмісту. Такий елемент завжди починається з нового рядка. Блоковий елемент може містити в собі інші блокові та рядкові елементи. Приклади блокових елементів: <div>, <p>, <ul>, <ol>, <h1> На відміну від блокового, рядковий елемент не переноситься на новий рядок, а розташовується у тому ж рядку, що й попередній елемент. Ширина рядкового елемента залежить від його вмісту. Блокові елементи не можна вкладати в рядкові. Приклади рядкових елементів: <a>, <span>, <strong>, <em>, <img>"
  },
  {
    "question": "Чому деякі символи можуть відображатись на сторінці у виді квадратів?",
    "answer": "Це може виникати через те, що деякі браузери можуть не підтримувати певні символи операційної системи. Також може відрізнятися кодування. Або не підключено потрібний шрифт з іконками."
  },
  {
    "question": "Що таке семантична верстка? Які семантичні теги знаєте?",
    "answer": "Це верстка орієнтована на структурування html-документів. У ній використовуються теги, які поділяють код на логічні блоки, що явно показують їх роль та зміст у структурі сторінки. Семантична верстка відрізняється від блокової лише елементами, що використовуються при структуризації сторінки. У блоковій верстці використовують в основному тільки елемент div, а в семантичній використовуються крім div ще безліч інших тегів, таких як: header, main, section, footer, nav, aside."
  },
  {
    "question": " Які типи заголовків існують в HTML? ",
    "answer": "HTML підтримує шість різних типів заголовків. Ці заголовки відрізняються за розміром шрифту, починаючи з найбільшого. h1 - найбільший заголовок. h6 - найменший заголовок. h1 має бути лише 1 на сторінці."
  },
  {
    "question": "Що називається потоком докумнта в HTML? Чи можна його змінювати? ",
    "answer": "Потоком документа HTML називається порядок виведення елементів на сторінку. У звичайному вигляді всі блоки виводяться у порядку, у якому записані всередині HTML-документа. Потік можна змінювати за допомогою css правил, наприклад, за допомогою position: absolute."
  },
  {
    "question": "Які існують способи підключення JavaScript до html-сторінки? В чому між ними різниця? ",
    "answer": "Перший спосіб — вставити скрипт у блок script. Другий спосіб — підключити скрипт за допомогою додавання посилання на файл JavaScript. Бажано всі скрипти підключати наприкінці блоку body."
  },
  {
    "question": "Які існують способи додавання CSS на сторінку? ",
    "answer": "Перший спосіб — описати селектори та їх значення всередині тегу style. Другий спосіб — підключити стилі за допомогою додавання посилання на зовнішній файл css, використовують тег link, що розташовується всередині блоку head.Третій спосіб — додати інлайнові стилі для кожного окремого елемента, використовуючи атрибут style."
  },
  {
    "question": "Різниця між reset.css и normalize.css?",
    "answer": "reset.css - скидає всі стилі в нуль для того, щоб можна було розпочати стилізацію сайту з чистого аркуша. normalize.css - приводить вихідні стилі до єдиного стану, у всіх браузерах."
  },
  {
    "question": "Що таке critical CSS? ",
    "answer": "Critical CSS - це стилі, які необхідні для відтворення першої видимої частини сторінки. Для моментального відтворення критичний CSS вбудовують в HTML, всі інші стилі завантажуються окремим файлом асинхронно."
  },
  {
    "question": "Що таке специфічність селекторів в CSS?",
    "answer": "Це спосіб, за допомогою якого браузери визначають, які значення властивостей CSS найбільше відповідають елементу і, отже, будуть застосовані. Специфічність є вагою, що надається конкретному правилу CSS. Найбільшу вагу мають inline стилі. Потім стилі селектора за ID. Найменшу вагу мають селектори по тегу і також селектор*."
  },
  {
    "question": "В чому різниця між псевдокласом та псевдоелементом в CSS?",
    "answer": "Псевдокласи описують особливий стан елементу. Наприклад, стан натиснутої кнопки. Псевдоелементи відповідають віртуальним елементам. Наприклад, потрібно виділити першу літеру в рядку."
  },
  {
    "question": "Що таке блочна модель CSS?",
    "answer": "Кожен блок має прямокутну область вмісту в центрі, поля навколо вмісту (padding), рамку навколо полів (border) та відступ за межами рамки (margin)."
  },
  {
    "question": "Яку роль виконує box-sizing?",
    "answer": "Властивість box-sizing визначає як обчислюється загальна ширина та висота елемента. Має 2 поведінки: - content-box це стандартна поведінка. Якщо встановити елементу ширину 100 пікселів, то ширина його контенту буде 100 пікселів, а ширина меж і внутрішніх відступів під час рендеру буде додана до фінальної ширини, що зробить елемент ширше ста пікселів. - border-box каже браузеру враховувати будь-які межі та внутрішні відступи у значеннях, які вказані у ширині та висоті елемента. Якщо виставити елементу ширину 100 пікселів, то ці 100 пікселів будуть містити межі та внутрішні відступи, а контент стискається, щоб виділити для них місце. Зазвичай це полегшує роботу з розмірами елементів."
  },
  {
    "question": "Які є види позиціонування елементів на сторінці? ",
    "answer": "Існує 5 видів позиціонування: - static - стандартне позиціонування; - relative - позиціонування щодо самого себе; - absolute - позиціонування щодо його найближчого відносно позиціонованого предка, якщо такий є; - fixed - позиціонування відносно viewport - sticky - липке позиціонування, яке може змінювати своє значення з relative на fixed під час прокручування сторінки."
  },
  {
    "question": "Що робить властивість z-index?",
    "answer": "Ця властивість визначає положення елемента та елементів, розташованих нижче по осі z. У разі перекриття елементів це значення визначає порядок накладання. У загальному випадку елементи з більшим z-index перекривають елементи з меншим. Ця властивість працює тільки для елементів, у яких значення position встановлено як absolute, fixed або relative."
  },
  {
    "question": " В чому різниця між px, em, rem?",
    "answer": "px - піксель, це найбільш базова, абсолютна та остаточна одиниця виміру;em - одиниця виміру відносно поточного розміру шрифту; rem - одиниця виміру відносно розміру шрифту елемента <html>."
  },
  {
    "question": "Що таке гумова, адаптивна та відзивчива верстка? В чому між ними різниця? ",
    "answer": "У гумовій верстці блоки змінюють ширину залежно від розміру вікна браузера. Адаптивна верстка реалізується за допомогою правил @media. Це дає змогу для кожного окремого розміру екрана відображати різну верстку. Будь-яка зміна розміру вікна відбувається ривками, після досягнення однієї із зазначених точок перелому.Респонсивна верстка — це поєднання гумової та адаптивної верстки. У реалізації найскладніша. Але результат виходить найбільш прийнятним."
  },
  {
    "question": " В чому різниця між visibility:hidden и display:none?",
    "answer": "visibility:hidden залишає елемент у нормальному потоці сторінки, і він все ще займає місце.display:none видаляє елемент із нормального потоку сторінки, що дозволяє іншим елементам заповнити його місце."
  },
  {
    "question": "Що таке repaint и reflow?",
    "answer": "Під час завантаження сторінки, якщо вона не порожня, завжди виконується щонайменше по одному reflow та repaint. Далі ці події виникають у таких випадках: - 1 - частина дерева відображення потребує перерахунку, тобто у якогось вузла змінилися ширина, висота чи координати. Викликається подія reflow. - 2 - в результаті змін частина контенту, що відображається, повинна оновитися. Йдеться в першу чергу про властивості стилів: колір фону і т. д. Викликається подія repaint. Якщо викликається reflow, після нього обов'язково викликається і repaint. Але зворотне хибно: repaint може викликатися незалежно від reflow."
  },
  {
    "question": "Яка різниця між відносною та абсолютною адресою? ",
    "answer": "Абсолютні адреси повинні починатися із зазначення протоколу (зазвичай http://) та містити ім'я сайту. (http://some-site.com/path) Відносні посилання ведуть відлік від кореня сайту чи поточного документа. (/path)"
  },
  {
    "question": "Різниця між тегом та елементом?",
    "answer": "Теги використовують для позначення початку та кінця вмісту HTML елемента.Елемент складається з тегів та вмісту."
  },
  {
    "question": "Коли ви використовуєте <button> , а коли <a>?",
    "answer": "Кнопка — це функціональний елемент, тобто елемент, який відповідає за виконання певної функції після натискання на неї.Посилання — це елемент навігації, тобто елемент, який відповідає за взаємозв'язок розділів веб-ресурсу (або різних ресурсів) між собою."
  },
  {
    "question": "Для чого потрібен атрибут type у кнопки? ",
    "answer": "type визначає тип кнопки, який встановлює її поведінку у формі. На вигляд кнопки різного типу ніяк не відрізняються, але у кожної такої кнопки свої функції.Існує 3 типи: button, reset і submit. За замовчуванням встановлено значення submit."
  },
  {
    "question": "Різниця між checkbox та radio?",
    "answer": "radio - створює перемикання між варіантами та дозволяє вибрати тільки один з них. checkbox - застосовується у формі для вибору кількох значень."
  },
  {
    "question": "Що таке наслідування стилів в CSS? І що таке каскадність в CSS?",
    "answer": "Коли вказується стиль елемента, частина властивостей може бути успадкована його дочірніми елементами та нащадками. Наприклад, якщо задати колір тексту для body, то всі дочірні елементи та нащадки його успадкують. Каскадність — це особливість CSS, за допомогою якої браузер визначає значення яких властивостей буде застосовано до елемента, коли виникає конфлікт властивостей. Конфлікт властивостей виникає, коли для елемента визначено кілька правил, селектори яких мають однакову специфічність і містять однакові властивості, але з різними значеннями."
  },
  {
    "question": "В чому різниця між контентними і оформлюючими/декоративними зображеннями?",
    "answer": "За допомогою контентних зображень до користувачів доноситься корисна інформація. Щоб додати контентне зображення на сторінку, в розмітці використовується тег <img>. Для таких зображень необхідно заповнювати атрибут alt, який описує те, що зображено на картинці.Декоративні зображення використовуються виключно для оформлення. Такі зображення не несуть для користувача корисну інформацію. Декоративні зображення слід реалізовувати за допомогою CSS."
  },
  {
    "question": "Чому у <img> та <input> не  має псевдоелементіов ::before, ::after? ",
    "answer": "Псевдоелементи ::before та ::after дають результат тільки для тих елементів, які мають вміст. А у <img> та <input> вмісту немає."
  },
  {
    "question": "Що таке flex-контейнер та flex-елемент?",
    "answer": "Flex-контейнер встановлює новий гнучкий контекст форматування для його вмісту. Flex-контейнером є той елемент, у якого задано властивість display: flex або display: inline-flex. Flex-елементом є кожен дочірній елемент flex-контейнера."
  },
  {
    "question": "Що таке flex-вісь? ",
    "answer": "Flexbox визначає поняття головної та допоміжної осі. Елементи flex завжди розміщуються вздовж головної осі. При цьому головна вісь може бути розташована горизонтально чи вертикально. Спочатку головна вісь розташована горизонтально з напрямком елементів справа наліво. Напрямок головної осі можна змінити за допомогою властивості flex-direction."
  },
  {
    "question": "Які переваги svg перед png або jpeg?",
    "answer": "1 - На відміну від растрової графіки, SVG не втрачає якості при масштабуванні. 2 - Браузеру не потрібно запитувати картинку у сервера, оскільки він сам її малює, отже, продуктивність підвищується. 3 - За допомогою CSS/JS можна змінювати параметри графіки на сайті, наприклад, фон, прозорість або межі. Також SVG можна анімувати. 4 - Об'єкти SVG важать набагато менше растрових зображень."
  }
]
